<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32WB55_PlantSensor\STM32WB55_PlantSensor.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32WB55_PlantSensor\STM32WB55_PlantSensor.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Nov 07 23:52:51 2019
<BR><P>
<H3>Maximum Stack Usage =        880 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[38]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[20]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">BusFault_Handler</a><BR>
 <LI><a href="#[1e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">HardFault_Handler</a><BR>
 <LI><a href="#[1f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">MemManage_Handler</a><BR>
 <LI><a href="#[21]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[38]">ADC1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[59]">AES1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5a]">AES2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[69]">APPE_SysStatusNot</a> from app_entry.o(i.APPE_SysStatusNot) referenced from app_entry.o(i.APPE_Init)
 <LI><a href="#[6a]">APPE_SysUserEvtRx</a> from app_entry.o(i.APPE_SysUserEvtRx) referenced from app_entry.o(i.APPE_Init)
 <LI><a href="#[6e]">Adv_Cancel</a> from app_ble.o(i.Adv_Cancel) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[6f]">Adv_Cancel_Req</a> from app_ble.o(i.Adv_Cancel_Req) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[6b]">BLE_StatusNot</a> from app_ble.o(i.BLE_StatusNot) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[6c]">BLE_UserEvtRx</a> from app_ble.o(i.BLE_UserEvtRx) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[20]">BusFault_Handler</a> from stm32wbxx_it.o(i.BusFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3b]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3c]">COMP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[50]">CRS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[31]">DMA1_Channel1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[32]">DMA1_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[33]">DMA1_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[34]">DMA1_Channel4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[35]">DMA1_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[36]">DMA1_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[37]">DMA1_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[60]">DMA2_Channel4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[61]">DMA2_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[62]">DMA2_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[63]">DMA2_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[64]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[23]">DebugMon_Handler</a> from stm32wbxx_it.o(i.DebugMon_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2c]">EXTI0_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4e]">EXTI15_10_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2d]">EXTI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2e]">EXTI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2f]">EXTI3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[30]">EXTI4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3d]">EXTI9_5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2a]">FLASH_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[54]">HSEM_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1e]">HardFault_Handler</a> from stm32wbxx_it.o(i.HardFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[45]">I2C1_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[44]">I2C1_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[47]">I2C3_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[46]">I2C3_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[52]">IPCC_C1_RX_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[53]">IPCC_C1_TX_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[57]">LCD_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[55]">LPTIM1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[56]">LPTIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4b]">LPUART1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1f]">MemManage_Handler</a> from stm32wbxx_it.o(i.MemManage_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1d]">NMI_Handler</a> from stm32wbxx_it.o(i.NMI_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[43]">PKA_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[27]">PVD_PVM_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[51]">PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[71]">PeerToPeer_Event_Handler</a> from p2p_stm.o(i.PeerToPeer_Event_Handler) referenced from p2p_stm.o(i.P2PS_STM_Init)
 <LI><a href="#[24]">PendSV_Handler</a> from stm32wbxx_it.o(i.PendSV_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[58]">QUADSPI_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2b]">RCC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5b]">RNG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4f]">RTC_Alarm_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[29]">RTC_WKUP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1c]">Reset_Handler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4c]">SAI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[48]">SPI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[49]">SPI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[d]">STORAGE_GetCapacity_FS</a> from usbd_storage_if.o(i.STORAGE_GetCapacity_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[12]">STORAGE_GetMaxLun_FS</a> from usbd_storage_if.o(i.STORAGE_GetMaxLun_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[c]">STORAGE_Init_FS</a> from usbd_storage_if.o(i.STORAGE_Init_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[e]">STORAGE_IsReady_FS</a> from usbd_storage_if.o(i.STORAGE_IsReady_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[f]">STORAGE_IsWriteProtected_FS</a> from usbd_storage_if.o(i.STORAGE_IsWriteProtected_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[10]">STORAGE_Read_FS</a> from usbd_storage_if.o(i.STORAGE_Read_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[11]">STORAGE_Write_FS</a> from usbd_storage_if.o(i.STORAGE_Write_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[22]">SVC_Handler</a> from stm32wbxx_it.o(i.SVC_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[72]">SendFreeBuf</a> from tl_mbox.o(i.SendFreeBuf) referenced from tl_mbox.o(i.TL_MM_EvtDone)
 <LI><a href="#[70]">Switch_OFF_GPIO</a> from app_ble.o(i.Switch_OFF_GPIO) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[25]">SysTick_Handler</a> from stm32wbxx_it.o(i.SysTick_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32wbxx.o(i.SystemInit) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[28]">TAMP_STAMP_LSECSS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3e]">TIM1_BRK_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[41]">TIM1_CC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[40]">TIM1_TRG_COM_TIM17_IRQHandler</a> from stm32wbxx_it.o(i.TIM1_TRG_COM_TIM17_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3f]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[42]">TIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[74]">TL_BLE_Init</a> from tl_mbox.o(i.TL_BLE_Init) referenced from hci_tl_if.o(i.hci_register_io_bus)
 <LI><a href="#[75]">TL_BLE_SendCmd</a> from tl_mbox.o(i.TL_BLE_SendCmd) referenced from hci_tl_if.o(i.hci_register_io_bus)
 <LI><a href="#[78]">TL_SYS_Init</a> from tl_mbox.o(i.TL_SYS_Init) referenced from shci_tl_if.o(i.shci_register_io_bus)
 <LI><a href="#[79]">TL_SYS_SendCmd</a> from tl_mbox.o(i.TL_SYS_SendCmd) referenced from shci_tl_if.o(i.shci_register_io_bus)
 <LI><a href="#[4d]">TSC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[76]">TlCmdEvtReceived</a> from shci_tl.o(i.TlCmdEvtReceived) referenced from shci_tl.o(i.shci_init)
 <LI><a href="#[73]">TlEvtReceived</a> from hci_tl.o(i.TlEvtReceived) referenced from hci_tl.o(i.hci_init)
 <LI><a href="#[77]">TlUserEvtReceived</a> from shci_tl.o(i.TlUserEvtReceived) referenced from shci_tl.o(i.shci_init)
 <LI><a href="#[4a]">USART1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[a]">USBD_MSC_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[16]">USBD_MSC_DataIn</a> from usbd_msc.o(i.USBD_MSC_DataIn) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[17]">USBD_MSC_DataOut</a> from usbd_msc.o(i.USBD_MSC_DataOut) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[14]">USBD_MSC_DeInit</a> from usbd_msc.o(i.USBD_MSC_DeInit) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[5]">USBD_MSC_DeviceDescriptor</a> from usbd_desc.o(i.USBD_MSC_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1b]">USBD_MSC_GetDeviceQualifierDescriptor</a> from usbd_msc.o(i.USBD_MSC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[19]">USBD_MSC_GetFSCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetFSCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[18]">USBD_MSC_GetHSCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetHSCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[1a]">USBD_MSC_GetOtherSpeedCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[13]">USBD_MSC_Init</a> from usbd_msc.o(i.USBD_MSC_Init) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[b]">USBD_MSC_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6]">USBD_MSC_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[7]">USBD_MSC_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[8]">USBD_MSC_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[9]">USBD_MSC_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_MSC_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[15]">USBD_MSC_Setup</a> from usbd_msc.o(i.USBD_MSC_Setup) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[39]">USB_HP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3a]">USB_LP_IRQHandler</a> from stm32wbxx_it.o(i.USB_LP_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[0]">USER_initialize</a> from user_diskio.o(i.USER_initialize) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[4]">USER_ioctl</a> from user_diskio.o(i.USER_ioctl) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[2]">USER_read</a> from user_diskio.o(i.USER_read) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[1]">USER_status</a> from user_diskio.o(i.USER_status) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[3]">USER_write</a> from user_diskio.o(i.USER_write) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[21]">UsageFault_Handler</a> from stm32wbxx_it.o(i.UsageFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[26]">WWDG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[6d]">hci_user_evt_proc</a> from hci_tl.o(i.hci_user_evt_proc) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[65]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[68]">shci_user_evt_proc</a> from shci_tl.o(i.shci_user_evt_proc) referenced from app_entry.o(i.APPE_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1df]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>AES1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>AES2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>HSEM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TAMP_STAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[150]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_ct_timer_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[a6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>ADC_Enable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32wbxx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
</UL>

<P><STRONG><a name="[82]"></a>APPE_Init</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_entry.o(i.APPE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = APPE_Init &rArr; shci_init &rArr; Cmd_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>APP_BLE_Init</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, app_ble.o(i.APP_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = APP_BLE_Init &rArr; SVCCTL_Init &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Create
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[16b]"></a>BLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.BLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[20]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>CRS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.CRS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[16d]"></a>DIS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.DIS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[23]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16e]"></a>EDS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.EDS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[e6]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[ac]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[ad]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[ae]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 918 bytes, Stack size 40 bytes, stm32wbxx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_ADC_Init</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32wbxx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_MspInit &rArr; LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32wbxx_hal_adc.o(i.HAL_ADC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Start_IT &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 346 bytes, Stack size 36 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[143]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[101]"></a>HAL_GetTickPrio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTickPrio))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[145]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32wbxx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32wbxx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32wbxx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32wbxx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>HAL_InitTick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32wbxx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_MspInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
</UL>

<P><STRONG><a name="[12a]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[e5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[128]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[bd]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wbxx_hal_pcd_ex.o(i.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HAL_PCDEx_LPM_Callback &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_PCDEx_PMAConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd_ex.o(i.HAL_PCDEx_PMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[ce]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[193]"></a>HAL_PCD_EP_Flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_EP_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>

<P><STRONG><a name="[194]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[d0]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[d2]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[d4]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[d7]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[d8]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCDEx_LPM_Callback &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_PCD_Init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_PCD_ResumeCallback &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[eb]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_PCD_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[de]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>HAL_PWREx_EnableVddUSB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(i.HAL_PWREx_EnableVddUSB))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[f2]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[17b]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRNGClockSource
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetCLK48ClockSource
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fa]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickPrio
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[102]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[105]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1360 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetRange
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetCalibTrimming
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI1_IsReady
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10b]"></a>HAL_RTC_Init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32wbxx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32wbxx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_ct_timer_init
</UL>

<P><STRONG><a name="[148]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32wbxx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_ct_timer_init
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[114]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM17_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_ct_timer_init
</UL>

<P><STRONG><a name="[115]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_ct_timer_init
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HIDS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HIDS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[170]"></a>HRS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HRS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[171]"></a>HTS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HTS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[17d]"></a>HW_IPCC_BLE_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_BLE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[17e]"></a>HW_IPCC_BLE_SendCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_BLE_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_SendCmd
</UL>

<P><STRONG><a name="[17f]"></a>HW_IPCC_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
</UL>

<P><STRONG><a name="[125]"></a>HW_IPCC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hw_ipcc.o(i.HW_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
</UL>

<P><STRONG><a name="[126]"></a>HW_IPCC_MM_SendFreeBuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hw_ipcc.o(i.HW_IPCC_MM_SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_IsActiveFlag_CHx
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>

<P><STRONG><a name="[181]"></a>HW_IPCC_SYS_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_SYS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
</UL>

<P><STRONG><a name="[182]"></a>HW_IPCC_SYS_SendCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_SYS_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_SendCmd
</UL>

<P><STRONG><a name="[183]"></a>HW_IPCC_TRACES_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_TRACES_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
</UL>

<P><STRONG><a name="[94]"></a>HW_TS_Create</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, hw_timerserver.o(i.HW_TS_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HW_TS_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[84]"></a>HW_TS_Init</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, hw_timerserver.o(i.HW_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_TS_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_Init
</UL>

<P><STRONG><a name="[9b]"></a>HW_TS_Start</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hw_timerserver.o(i.HW_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[98]"></a>HW_TS_Stop</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, hw_timerserver.o(i.HW_TS_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkTimer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[1e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>IAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.IAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[173]"></a>LLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.LLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[17c]"></a>LST_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm_list.o(i.LST_init_head))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[1d4]"></a>LST_insert_head</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
</UL>

<P><STRONG><a name="[178]"></a>LST_insert_tail</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[179]"></a>LST_is_empty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
</UL>

<P><STRONG><a name="[12e]"></a>LST_remove_head</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm_list.o(i.LST_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
</UL>

<P><STRONG><a name="[12f]"></a>LST_remove_node</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm_list.o(i.LST_remove_node))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
</UL>

<P><STRONG><a name="[177]"></a>MESH_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.MESH_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[139]"></a>MSC_BOT_CplClrFeature</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_CplClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[13a]"></a>MSC_BOT_DataIn</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataIn
</UL>

<P><STRONG><a name="[13b]"></a>MSC_BOT_DataOut</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataOut
</UL>

<P><STRONG><a name="[19f]"></a>MSC_BOT_DeInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[13c]"></a>MSC_BOT_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_BOT_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[13e]"></a>MSC_BOT_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MSC_BOT_Reset &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[138]"></a>MSC_BOT_SendCSW</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_SendCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
</UL>

<P><STRONG><a name="[140]"></a>MX_FATFS_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>MX_USB_Device_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_USB_Device_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RegisterStorage
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>OTAS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.OTAS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[a0]"></a>OTP_Read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, otp.o(i.OTP_Read))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
</UL>

<P><STRONG><a name="[14f]"></a>Osal_MemCpy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[151]"></a>Osal_MemSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[93]"></a>P2PS_APP_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p2p_server_app.o(i.P2PS_APP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[16a]"></a>P2PS_APP_Notification</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p2p_server_app.o(i.P2PS_APP_Notification))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[157]"></a>P2PS_STM_App_Notification</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p2p_server_app.o(i.P2PS_STM_App_Notification))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeerToPeer_Event_Handler
</UL>

<P><STRONG><a name="[152]"></a>P2PS_STM_Init</STRONG> (Thumb, 374 bytes, Stack size 80 bytes, p2p_stm.o(i.P2PS_STM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[136]"></a>SCSI_ProcessCmd</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>

<P><STRONG><a name="[135]"></a>SCSI_SenseCode</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_SenseCode))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[8f]"></a>SHCI_C2_BLE_Init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, shci.o(i.SHCI_C2_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SHCI_C2_BLE_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[168]"></a>SVCCTL_App_Notification</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, app_ble.o(i.SVCCTL_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Notification
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>

<P><STRONG><a name="[91]"></a>SVCCTL_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, svc_ctl.o(i.SVCCTL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SVCCTL_Init &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTAS_STM_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESH_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLS_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAS_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDS_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDS_STM_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIS_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_STM_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLS_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[176]"></a>SVCCTL_InitCustomSvc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.SVCCTL_InitCustomSvc))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[153]"></a>SVCCTL_RegisterSvcHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, svc_ctl.o(i.SVCCTL_RegisterSvcHandler))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[9e]"></a>SVCCTL_UserEvtRx</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, svc_ctl.o(i.SVCCTL_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UserEvtRx
</UL>

<P><STRONG><a name="[22]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>SystemClock_Config</STRONG> (Thumb, 228 bytes, Stack size 208 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[100]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, system_stm32wbxx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_stm32wbxx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32wbxx_it.o(i.TIM1_TRG_COM_TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_TRG_COM_TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32wbxx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[11e]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[74]"></a>TL_BLE_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_BLE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(i.hci_register_io_bus)
</UL>
<P><STRONG><a name="[75]"></a>TL_BLE_SendCmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_BLE_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_BLE_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(i.hci_register_io_bus)
</UL>
<P><STRONG><a name="[89]"></a>TL_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tl_mbox.o(i.TL_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_Init
</UL>

<P><STRONG><a name="[85]"></a>TL_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tl_mbox.o(i.TL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_Init &rArr; HW_IPCC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_Init
</UL>

<P><STRONG><a name="[180]"></a>TL_MM_EvtDone</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_MM_EvtDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
</UL>

<P><STRONG><a name="[88]"></a>TL_MM_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_MM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_MM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_Init
</UL>

<P><STRONG><a name="[78]"></a>TL_SYS_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_SYS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(i.shci_register_io_bus)
</UL>
<P><STRONG><a name="[79]"></a>TL_SYS_SendCmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_SYS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_SYS_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(i.shci_register_io_bus)
</UL>
<P><STRONG><a name="[8a]"></a>TL_TRACES_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_TRACES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_TRACES_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[174]"></a>TPS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.TPS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[1a4]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[188]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[189]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[18a]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[18b]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[18c]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[18d]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19e]"></a>USBD_GetString</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ProductStrDescriptor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ManufacturerStrDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_InterfaceStrDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[14b]"></a>USBD_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
</UL>

<P><STRONG><a name="[190]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[192]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[c9]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[cb]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[13d]"></a>USBD_LL_FlushEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_FlushEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_FlushEP
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[134]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[18f]"></a>USBD_LL_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddUSB
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1a6]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[197]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[132]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[e8]"></a>USBD_LL_Reset</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[c7]"></a>USBD_LL_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[e9]"></a>USBD_LL_SOF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[e7]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[198]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[ec]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[131]"></a>USBD_LL_StallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[19d]"></a>USBD_LL_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[c5]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[137]"></a>USBD_LL_Transmit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[a]"></a>USBD_MSC_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_MSC_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_MSC_DataIn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_MSC_DataIn &rArr; MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_MSC_DataOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USBD_MSC_DataOut &rArr; MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_MSC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_MSC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_MSC_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_MSC_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_MSC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_MSC_GetFSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_MSC_GetHSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_MSC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_MSC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_MSC_Init &rArr; MSC_BOT_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_MSC_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_MSC_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_MSC_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_MSC_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_MSC_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_MSC_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_MSC_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_MSC_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[14d]"></a>USBD_MSC_RegisterStorage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_RegisterStorage))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
</UL>

<P><STRONG><a name="[9]"></a>USBD_MSC_SerialStrDescriptor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_MSC_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_MSC_SerialStrDescriptor &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_MSC_Setup</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, usbd_msc.o(i.USBD_MSC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_MSC_Setup &rArr; MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[199]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[14c]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
</UL>

<P><STRONG><a name="[1a5]"></a>USBD_SetClassConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[14e]"></a>USBD_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
</UL>

<P><STRONG><a name="[19a]"></a>USBD_StdDevReq</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[19c]"></a>USBD_StdEPReq</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[19b]"></a>USBD_StdItfReq</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1a0]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[1a1]"></a>USBD_static_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[d1]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, stm32wbxx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[cd]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 270 bytes, Stack size 28 bytes, stm32wbxx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[ee]"></a>USB_DevConnect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[e3]"></a>USB_DevInit</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32wbxx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[e2]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[d6]"></a>USB_EP0_OutStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[cf]"></a>USB_EPClearStall</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32wbxx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[d5]"></a>USB_EPSetStall</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32wbxx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[d3]"></a>USB_EPStartXfer</STRONG> (Thumb, 386 bytes, Stack size 20 bytes, stm32wbxx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[ef]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[3a]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.USB_LP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = USB_LP_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCDEx_LPM_Callback &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>USB_ReadInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>USB_ReadPMA</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_ll_usb.o(i.USB_ReadPMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPMA
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[ea]"></a>USB_SetDevAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[1a7]"></a>USB_WritePMA</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbxx_ll_usb.o(i.USB_WritePMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>

<P><STRONG><a name="[0]"></a>USER_initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_diskio.o(i.USER_initialize))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USER_ioctl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_diskio.o(i.USER_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USER_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_diskio.o(i.USER_read))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USER_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_diskio.o(i.USER_status))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USER_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_diskio.o(i.USER_write))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>UTIL_LPM_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_lpm.o(i.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_Init
</UL>

<P><STRONG><a name="[8c]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32_lpm.o(i.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[1a8]"></a>UTIL_SEQ_EvtIdle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.UTIL_SEQ_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>

<P><STRONG><a name="[1ac]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(i.UTIL_SEQ_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[9d]"></a>UTIL_SEQ_PauseTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PauseTask))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[1ad]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[1ab]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[86]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32_seq.o(i.UTIL_SEQ_RegTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_SEQ_RegTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_position
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_Init
</UL>

<P><STRONG><a name="[9c]"></a>UTIL_SEQ_ResumeTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_ResumeTask))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[1a9]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32_seq.o(i.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_position
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>

<P><STRONG><a name="[1cf]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
</UL>

<P><STRONG><a name="[97]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_seq.o(i.UTIL_SEQ_SetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel_Req
</UL>

<P><STRONG><a name="[1ae]"></a>UTIL_SEQ_WaitEvt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32_seq.o(i.UTIL_SEQ_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
</UL>

<P><STRONG><a name="[21]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ec]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ed]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ab]"></a>aci_gap_configure_whitelist</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_gap_aci.o(i.aci_gap_configure_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aci_gap_configure_whitelist &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[a5]"></a>aci_gap_init</STRONG> (Thumb, 132 bytes, Stack size 320 bytes, ble_gap_aci.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = aci_gap_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[aa]"></a>aci_gap_set_authentication_requirement</STRONG> (Thumb, 114 bytes, Stack size 304 bytes, ble_gap_aci.o(i.aci_gap_set_authentication_requirement))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = aci_gap_set_authentication_requirement &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[99]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 162 bytes, Stack size 336 bytes, ble_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[a9]"></a>aci_gap_set_io_capability</STRONG> (Thumb, 74 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_set_io_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aci_gap_set_io_capability &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[96]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_gap_aci.o(i.aci_gap_set_non_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
</UL>

<P><STRONG><a name="[9a]"></a>aci_gap_update_adv_data</STRONG> (Thumb, 88 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_update_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aci_gap_update_adv_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[155]"></a>aci_gatt_add_char</STRONG> (Thumb, 190 bytes, Stack size 336 bytes, ble_gatt_aci.o(i.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[154]"></a>aci_gatt_add_service</STRONG> (Thumb, 170 bytes, Stack size 320 bytes, ble_gatt_aci.o(i.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[a4]"></a>aci_gatt_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aci_gatt_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[a7]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 108 bytes, Stack size 304 bytes, ble_gatt_aci.o(i.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[92]"></a>aci_hal_set_radio_activity_mask</STRONG> (Thumb, 74 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_set_radio_activity_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aci_hal_set_radio_activity_mask &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[a3]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[a2]"></a>aci_hal_write_config_data</STRONG> (Thumb, 98 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[1cd]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1ca]"></a>disk_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1cc]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1dd]"></a>disk_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[1c0]"></a>f_open</STRONG> (Thumb, 520 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[186]"></a>hci_cmd_resp_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.hci_cmd_resp_release))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[1d0]"></a>hci_cmd_resp_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.hci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[8e]"></a>hci_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hci_tl.o(i.hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_register_io_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[169]"></a>hci_le_read_phy</STRONG> (Thumb, 104 bytes, Stack size 304 bytes, ble_hci_le.o(i.hci_le_read_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = hci_le_read_phy &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[a8]"></a>hci_le_set_default_phy</STRONG> (Thumb, 84 bytes, Stack size 296 bytes, ble_hci_le.o(i.hci_le_set_default_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = hci_le_set_default_phy &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[185]"></a>hci_notify_asynch_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(i.hci_notify_asynch_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[1d1]"></a>hci_register_io_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hci_tl_if.o(i.hci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[a1]"></a>hci_reset</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ble_hci_le.o(i.hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hci_reset &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[1af]"></a>hci_send_req</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, hci_tl.o(i.hci_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyCmdStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[6d]"></a>hci_user_evt_proc</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, hci_tl.o(i.hci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 568 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_si7021_handler_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_charge_transfer_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d6]"></a>pke_charge_transfer_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pke_charge_transfer.o(i.pke_charge_transfer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = pke_charge_transfer_init &rArr; pke_ct_timer_init &rArr; HAL_TIM_OC_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_ct_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>pke_ct_timer_init</STRONG> (Thumb, 110 bytes, Stack size 88 bytes, pke_charge_transfer.o(i.pke_ct_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = pke_ct_timer_init &rArr; HAL_TIM_OC_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pke_charge_transfer_init
</UL>

<P><STRONG><a name="[1d7]"></a>pke_si7021_handler_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pke_si7021_handler.o(i.pke_si7021_handler_init))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>shci_cmd_resp_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(i.shci_cmd_resp_release))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlCmdEvtReceived
</UL>

<P><STRONG><a name="[1da]"></a>shci_cmd_resp_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(i.shci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[87]"></a>shci_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, shci_tl.o(i.shci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shci_init &rArr; Cmd_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_register_io_bus
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_Init
</UL>

<P><STRONG><a name="[187]"></a>shci_notify_asynch_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.shci_notify_asynch_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
</UL>

<P><STRONG><a name="[1db]"></a>shci_register_io_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shci_tl_if.o(i.shci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
</UL>

<P><STRONG><a name="[167]"></a>shci_send</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, shci_tl.o(i.shci_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_SetStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
</UL>

<P><STRONG><a name="[68]"></a>shci_user_evt_proc</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, shci_tl.o(i.shci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.APPE_Init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[142]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[13f]"></a>MX_ADC1_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>MX_GPIO_Init</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>MX_I2C1_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>MX_TIM1_Init</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_OC_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>APPE_SysStatusNot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(i.APPE_SysStatusNot))
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.APPE_Init)
</UL>
<P><STRONG><a name="[6a]"></a>APPE_SysUserEvtRx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_entry.o(i.APPE_SysUserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = APPE_SysUserEvtRx &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.APPE_Init)
</UL>
<P><STRONG><a name="[1d5]"></a>LinkTimerBefore</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hw_timerserver.o(i.LinkTimerBefore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkTimerBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
</UL>

<P><STRONG><a name="[15f]"></a>ReadRtcSsrValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_timerserver.o(i.ReadRtcSsrValue))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>

<P><STRONG><a name="[12c]"></a>RescheduleTimerList</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, hw_timerserver.o(i.RescheduleTimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[15e]"></a>RestartWakeupCounter</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hw_timerserver.o(i.RestartWakeupCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRtcSsrValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>

<P><STRONG><a name="[15d]"></a>ReturnTimeElapsed</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hw_timerserver.o(i.ReturnTimeElapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReturnTimeElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRtcSsrValue
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>

<P><STRONG><a name="[12d]"></a>UnlinkTimer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hw_timerserver.o(i.UnlinkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UnlinkTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
</UL>

<P><STRONG><a name="[12b]"></a>linkTimer</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, hw_timerserver.o(i.linkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linkTimer &rArr; LinkTimerBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkTimerBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[6e]"></a>Adv_Cancel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_ble.o(i.Adv_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Adv_Cancel &rArr; aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[6f]"></a>Adv_Cancel_Req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(i.Adv_Cancel_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adv_Cancel_Req &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[95]"></a>Adv_Request</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, app_ble.o(i.Adv_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[6b]"></a>BLE_StatusNot</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_ble.o(i.BLE_StatusNot))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_ResumeTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PauseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[6c]"></a>BLE_UserEvtRx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ble.o(i.BLE_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = BLE_UserEvtRx &rArr; SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[9f]"></a>BleGetBdAddress</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_ble.o(i.BleGetBdAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BleGetBdAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[90]"></a>Ble_Hci_Gap_Gatt_Init</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, app_ble.o(i.Ble_Hci_Gap_Gatt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Ble_Hci_Gap_Gatt_Init &rArr; aci_gap_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[70]"></a>Switch_OFF_GPIO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ble.o(i.Switch_OFF_GPIO))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[127]"></a>LL_C1_IPCC_IsActiveFlag_CHx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_ipcc.o(i.LL_C1_IPCC_IsActiveFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
</UL>

<P><STRONG><a name="[191]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1a2]"></a>IntToUnicode</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SerialStrDescriptor
</UL>

<P><STRONG><a name="[d]"></a>STORAGE_GetCapacity_FS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_GetCapacity_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>STORAGE_GetMaxLun_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_GetMaxLun_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>STORAGE_Init_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>STORAGE_IsReady_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_IsReady_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>STORAGE_IsWriteProtected_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_IsWriteProtected_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>STORAGE_Read_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_Read_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>STORAGE_Write_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_Write_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[112]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[da]"></a>PCD_EP_ISR_Handler</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, stm32wbxx_hal_pcd.o(i.PCD_EP_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PCD_EP_ISR_Handler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPMA
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[b0]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[af]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[b1]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_adc.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[b3]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[11d]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32wbxx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[11f]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[120]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[121]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[122]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32wbxx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[ff]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[fc]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[fb]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[109]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[10a]"></a>LL_RCC_LSI1_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_LSI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[104]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[fe]"></a>LL_RCC_MSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[108]"></a>LL_RCC_MSI_SetCalibTrimming</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[107]"></a>LL_RCC_MSI_SetRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_SetRange))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[103]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[fd]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[15b]"></a>RCC_SetFlashLatency</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, stm32wbxx_hal_rcc.o(i.RCC_SetFlashLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[106]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f3]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[158]"></a>LL_RCC_PLLSAI1_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[15a]"></a>LL_RCC_PLLSAI1_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[159]"></a>LL_RCC_PLLSAI1_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[f6]"></a>LL_RCC_SetCLK48ClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetCLK48ClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f5]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetI2CClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetI2CClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f4]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f8]"></a>LL_RCC_SetRNGClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetRNGClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f1]"></a>RCCEx_PLLSAI1_ConfigNP</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNP
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f7]"></a>RCCEx_PLLSAI1_ConfigNQ</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNQ
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f9]"></a>RCCEx_PLLSAI1_ConfigNR</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[c3]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[1b0]"></a>check_fs</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1c3]"></a>chk_lock</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1ce]"></a>clear_lock</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1bd]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1b4]"></a>create_chain</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1b7]"></a>create_name</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1b9]"></a>dir_find</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1bb]"></a>dir_next</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1be]"></a>dir_register</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1ba]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1c1]"></a>find_volume</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1c2]"></a>follow_path</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1b5]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1cb]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1c9]"></a>inc_lock</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1c6]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1b3]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1b2]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1bf]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1b8]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1b1]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1b6]"></a>put_fat</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1c8]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1c7]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1c5]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[1d9]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[1bc]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[72]"></a>SendFreeBuf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tl_mbox.o(i.SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendFreeBuf &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tl_mbox.o(i.TL_MM_EvtDone)
</UL>
<P><STRONG><a name="[71]"></a>PeerToPeer_Event_Handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, p2p_stm.o(i.PeerToPeer_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PeerToPeer_Event_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_stm.o(i.P2PS_STM_Init)
</UL>
<P><STRONG><a name="[1d2]"></a>NotifyCmdStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hci_tl.o(i.NotifyCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[73]"></a>TlEvtReceived</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hci_tl.o(i.TlEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlEvtReceived &rArr; hci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl.o(i.hci_init)
</UL>
<P><STRONG><a name="[1dc]"></a>Cmd_SetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, shci_tl.o(i.Cmd_SetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cmd_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[76]"></a>TlCmdEvtReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shci_tl.o(i.TlCmdEvtReceived))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(i.shci_init)
</UL>
<P><STRONG><a name="[77]"></a>TlUserEvtReceived</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shci_tl.o(i.TlUserEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlUserEvtReceived &rArr; shci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(i.shci_init)
</UL>
<P><STRONG><a name="[18e]"></a>USBD_GetDescriptor</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1a3]"></a>USBD_SetConfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[130]"></a>MSC_BOT_Abort</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_BOT_Abort &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[133]"></a>MSC_BOT_CBW_Decode</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[160]"></a>SCSI_CheckAddressRange</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_CheckAddressRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_CheckAddressRange
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[165]"></a>SCSI_ProcessRead</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SCSI_ProcessRead &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[166]"></a>SCSI_ProcessWrite</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ProcessWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
</UL>

<P><STRONG><a name="[163]"></a>SCSI_Read10</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SCSI_Read10 &rArr; SCSI_ProcessRead &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[162]"></a>SCSI_ReadCapacity10</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[161]"></a>SCSI_ReadFormatCapacity</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ReadFormatCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[164]"></a>SCSI_Write10</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1aa]"></a>bit_position</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32_seq.o(i.bit_position))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
